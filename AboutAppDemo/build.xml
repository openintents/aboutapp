<?xml version="1.0" ?>
<project name="TestAboutApp" default="debug">

    <!-- Read properties from property file -->
    <property file="build.properties" />

    <!-- Read manifest properties , e.g. manifest(android:versionName) or manifest.package -->
    <xmlproperty file="AndroidManifest.xml" />

    <!-- Path to Android SDK and tools -->
    <property name="sdk-folder" value="${android.sdk}" />
    <property name="android-tools" value="${sdk-folder}/tools" />
    <echo>Using Android SDK directory ${sdk-folder}</echo>

    <!-- Application Package Name -->
    <property name="application-package" value="${manifest(package)}" />
    <property name="version" value="${manifest(android:versionName)}" />

    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="outdir" value="bin" />

    <!-- OpenIntents library file -->
    <property name="openintents-lib-jar" value="lib/openintents-lib.jar" />

    <!-- No user servicable parts below. -->

    <property name="android-framework" value="${android-tools}/lib/framework.aidl" />

    <!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="srcdir" value="src" />
    <condition property="srcdir-ospath" value="${basedir}\${srcdir}" else="${basedir}/${srcdir}">
        <os family="windows" />
    </condition>

    <property name="external-libs" value="lib" />
    <condition property="external-libs-ospath" value="${basedir}\${external-libs}"
               else="${basedir}/${external-libs}">
        <os family="windows" />
    </condition>

    <!-- Output directories -->
    <property name="outdir-classes" value="${outdir}/classes" />
    <condition property="outdir-classes-ospath" value="${basedir}\${outdir-classes}"
               else="${basedir}/${outdir-classes}">
        <os family="windows" />
    </condition>

    <property name="docdir" value="doc" />
    <property name="releasedir" value="release" />

    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="src" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />
    <condition property="intermediate-dex-ospath" value="${basedir}\${intermediate-dex}"
               else="${basedir}/${intermediate-dex}">
        <os family="windows" />
    </condition>

    <!-- The final package file to generate -->
    <property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
    <condition property="resources-package-ospath" value="${basedir}\${resources-package}"
               else="${basedir}/${resources-package}">
        <os family="windows" />
    </condition>

    <property name="out-debug-package" value="${outdir}/${ant.project.name}.apk" />
    <condition property="out-debug-package-ospath" value="${basedir}\${out-debug-package}"
               else="${basedir}/${out-debug-package}">
        <os family="windows" />
    </condition>

    <property name="out-unsigned-package" value="${outdir}/${ant.project.name}-unsigned.apk" />
    <condition property="out-unsigned-package-ospath" value="${basedir}\${out-unsigned-package}"
               else="${basedir}/${out-unsigned-package}">
        <os family="windows" />
    </condition>

    <property name="out-signed-package" value="${outdir}/${ant.project.name}-${version}.apk" />
    <condition property="out-signed-package-ospath" value="${basedir}\${out-signed-package}"
               else="${basedir}/${out-signed-package}">
        <os family="windows" />
    </condition>

    <property name="out-release-source"
              value="${releasedir}/${ant.project.name}-source-${version}" />
    <condition property="out-release-source-ospath"
               value="${basedir}\${out-release-source}"
               else="${basedir}/${out-release-source}">
        <os family="windows" />
    </condition>

    <!-- Tools -->
    <condition property="aapt" value="${android-tools}/aapt.exe" else="${android-tools}/aapt">
        <os family="windows" />
    </condition>
    <condition property="aidl" value="${android-tools}/aidl.exe" else="${android-tools}/aidl">
        <os family="windows" />
    </condition>
    <condition property="adb" value="${android-tools}/adb.exe" else="${android-tools}/adb">
        <os family="windows" />
    </condition>
    <condition property="dx" value="${android-tools}/dx.bat" else="${android-tools}/dx">
        <os family="windows" />
    </condition>
    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat"
               else="${android-tools}/apkbuilder">
        <os family="windows" />
    </condition>

    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat"
               else="${android-tools}/apkbuilder">
        <os family="windows" />
    </condition>

    <condition property="android-jar" value="${sdk-folder}\android.jar"
               else="${sdk-folder}/android.jar">
        <os family="windows" />
    </condition>

    <!-- Rules -->

    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <mkdir dir="${outdir}" />
        <delete dir="${outdir-classes}" />
        <mkdir dir="${outdir-classes}" />
    </target>

    <target name="clear_layout">
        <echo>purging .bak files</echo>
        <delete>
            <fileset dir="." includes="**/*.bak" />
        </delete>
    </target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <echo>Compiling aidl files into Java classes...</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android-framework}" />
            <arg value="-I${srcdir}" />
            <fileset dir="${srcdir}">
                <include name="**/*.aidl" />
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src, aidl">
        <javac encoding="ascii" target="1.5" debug="true" extdirs="" srcdir="."
               destdir="${outdir-classes}" bootclasspath="${android-jar}">
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-ospath}" />
            <arg path="${outdir-classes-ospath}" />
            <fileset dir="${external-libs}" includes="*.jar" />
        </apply>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir" property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Package the application and sign it with a debug key.
         This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex, package-res">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package-ospath}" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
        </exec>
    </target>

    <!-- Package the application without signing it.
         This allows for the application to be signed later with an official publishing key. -->
    <target name="release" depends="dex, package-res">
        <echo>Packaging ${out-unsigned-package} for release...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-unsigned-package-ospath}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
        </exec>
        <signjar jar="${out-unsigned-package-ospath}" alias="${cert-alias}" keystore="${keystore}"
                 storepass="${storepass}" signedjar="${out-signed-package-ospath}" />
    </target>

    <!-- Install the package on the default emulator -->
    <target name="install" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>

    <target name="reinstall" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>


    <!-- Install the package on the default emulator -->
    <target name="install-signed" depends="release">
        <echo>Installing ${out-signed-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-signed-package}" />
        </exec>
    </target>

    <target name="reinstall-signed" depends="release">
        <echo>Reinstalling ${out-signed-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-signed-package}" />
        </exec>
    </target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>


    <!-- ############### JavaDoc ####################### -->
    <!-- Create JavaDoc -->
    <target name="javadoc">
        <delete dir="${docdir}" />
        <javadoc access="public" author="true" destdir="${docdir}" nodeprecated="false"
                 nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false"
                 source="1.6" sourcepath="${srcdir}" splitindex="true" use="true" version="true">
        </javadoc>
    </target>

    <!-- ############### Release source ####################### -->
    <!-- Copy to source release -->
    <target name="release-source">
        <delete dir="${releasedir}" />
        <mkdir dir="${releasedir}" />
        <copy todir="${out-release-source-ospath}">
            <fileset dir=".">
                <exclude name="**/bin/**" />
                <exclude name="**/doc/**" />
                <exclude name="**/release/**" />
                <exclude name="**/tmp/**" />
                <exclude name="**/.svn" />
                <exclude name="**/build-private.properties" />
            </fileset>
        </copy>
        <zip destfile="${out-release-source-ospath}.zip">
            <zipfileset dir="${out-release-source-ospath}"
                        prefix="${ant.project.name}-source-${version}" />
        </zip>
        <delete dir="${out-release-source-ospath}" />
    </target>

    <!-- ############ Convencience target ############## -->
    <target name="all" depends="debug, javadoc" />

</project>
